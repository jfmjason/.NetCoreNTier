// <auto-generated />
using System;
using BA.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BA.Infra.Data.Migrations
{
    [DbContext(typeof(BADbContext))]
    [Migration("20180926132839_AddedProcessingDateToApprovalReques")]
    partial class AddedProcessingDateToApprovalReques
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BA.Core.Entity.AccessUserfeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("FeatureId")
                        .HasColumnName("Feature_Id");

                    b.Property<int>("ModuleId")
                        .HasColumnName("Module_Id");

                    b.Property<int?>("OperatorId");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StationId")
                        .HasColumnName("Station_Id");

                    b.Property<int>("Userid")
                        .HasColumnName("USERID");

                    b.HasKey("Id");

                    b.ToTable("ACCESS_USERFEATURES","HISGLOBAL");
                });

            modelBuilder.Entity("BA.Core.Entity.ApprovalRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("ApprovalRequestStatusId");

                    b.Property<int>("ApprovalRequestTypeId");

                    b.Property<int>("AuthorityId");

                    b.Property<int>("BranchId");

                    b.Property<int>("CategoryId");

                    b.Property<int>("CompanyId");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreationIPAddress");

                    b.Property<int>("DoctorId");

                    b.Property<int>("GradeId");

                    b.Property<int?>("IPId");

                    b.Property<string>("InsuranceCardNumber");

                    b.Property<string>("IssueAuthorityCode");

                    b.Property<string>("ModificationIPAddress");

                    b.Property<int?>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OrderId");

                    b.Property<string>("PatientMobileNumber");

                    b.Property<int>("PatientTypeId");

                    b.Property<int?>("ProcessById");

                    b.Property<DateTime?>("ProcessingDate");

                    b.Property<int>("Registrationno");

                    b.Property<int>("RequestCreationStationId");

                    b.Property<int?>("RequestModificationStationId");

                    b.Property<string>("SMSCode");

                    b.Property<string>("SMSStatus");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalRequestStatusId");

                    b.HasIndex("ApprovalRequestTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DoctorId");

                    b.HasIndex("GradeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PatientTypeId");

                    b.HasIndex("ProcessById");

                    b.HasIndex("RequestCreationStationId");

                    b.HasIndex("RequestModificationStationId");

                    b.HasIndex("IssueAuthorityCode", "Registrationno");

                    b.ToTable("ApprovalRequest","UCAF");
                });

            modelBuilder.Entity("BA.Core.Entity.ApprovalRequestItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("ApprovalNumber");

                    b.Property<int>("ApprovalRequestId");

                    b.Property<int>("ApprovalRequestItemStatusId");

                    b.Property<decimal>("ApprovedItemPrice");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DepartmentId");

                    b.Property<int?>("IPBServiceId");

                    b.Property<int>("ItemId");

                    b.Property<string>("ItemName");

                    b.Property<decimal>("ItemPrice");

                    b.Property<int?>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OPBServiceId");

                    b.Property<int>("Quantity");

                    b.Property<string>("Remarks");

                    b.Property<int?>("ServiceId");

                    b.Property<int>("TariffId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalRequestId");

                    b.HasIndex("ApprovalRequestItemStatusId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IPBServiceId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OPBServiceId");

                    b.HasIndex("TariffId");

                    b.ToTable("ApprovalRequestItem","UCAF");
                });

            modelBuilder.Entity("BA.Core.Entity.ApprovalRequestItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ApprovalRequestItemStatus","MASTER");
                });

            modelBuilder.Entity("BA.Core.Entity.ApprovalRequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ApprovalRequestStatus","MASTER");
                });

            modelBuilder.Entity("BA.Core.Entity.ApprovalRequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ApprovalRequestType","MASTER");
                });

            modelBuilder.Entity("BA.Core.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int?>("AccountType");

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<int?>("ApprovalDays");

                    b.Property<bool?>("ArabicInvoice");

                    b.Property<string>("Arabiccode")
                        .HasColumnName("arabiccode")
                        .HasMaxLength(100);

                    b.Property<string>("Arabicname")
                        .HasColumnName("arabicname")
                        .HasMaxLength(100);

                    b.Property<string>("Attribute4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("BillingCollectorId");

                    b.Property<int?>("BillingOfficerId");

                    b.Property<string>("BlockReason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<bool?>("ByPassExclusionsStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("CatGroup")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<short>("CategoryType");

                    b.Property<string>("City")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Contactpersondesig")
                        .IsRequired()
                        .HasColumnName("CONTACTPERSONDESIG")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Contactpersonname")
                        .IsRequired()
                        .HasColumnName("CONTACTPERSONNAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte?>("Coverage");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted");

                    b.Property<string>("EmailId")
                        .HasColumnName("EmailID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FaxNo")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("FaxNo2")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<decimal>("FixedConCharges")
                        .HasColumnType("numeric(13, 2)");

                    b.Property<string>("InsertUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Insert_Update")
                        .HasDefaultValueSql("('I')")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<bool>("InsuranceCard");

                    b.Property<decimal>("InvoiceConFee")
                        .HasColumnType("numeric(13, 2)");

                    b.Property<int?>("Ippd")
                        .HasColumnName("IPPD");

                    b.Property<bool>("IquamaId")
                        .HasColumnName("IquamaID");

                    b.Property<bool?>("Loaconsultation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LOAConsultation")
                        .HasDefaultValueSql("(0)");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Opconsultations")
                        .HasColumnName("OPConsultations");

                    b.Property<int>("OperatorId")
                        .HasColumnName("OperatorID");

                    b.Property<int?>("Oppd")
                        .HasColumnName("OPPD");

                    b.Property<string>("OraCode")
                        .HasColumnName("Ora_Code")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PayAfter")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("PharmacyCstheader")
                        .HasColumnName("PharmacyCSTHeader");

                    b.Property<string>("PoBox")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("PolicyRules")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("PrintAddress");

                    b.Property<string>("ProviderCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("RefLetter");

                    b.Property<int?>("ReferralBasis");

                    b.Property<decimal>("RegCharges")
                        .HasColumnType("numeric(13, 2)");

                    b.Property<short?>("RegfeePaidby");

                    b.Property<string>("Remarks")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<byte?>("RevisitDays")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((10))");

                    b.Property<int?>("Speccons")
                        .HasColumnName("speccons");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("TariffId")
                        .HasColumnName("TariffID");

                    b.Property<string>("TelNo2")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("TelephoneNo")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("Ucf")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UCF")
                        .HasDefaultValueSql("(0)");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTill")
                        .HasColumnType("datetime");

                    b.Property<int?>("Wfcls")
                        .HasColumnName("WFCLS");

                    b.Property<int?>("Wfrc")
                        .HasColumnName("WFRC");

                    b.Property<int?>("Wfrs")
                        .HasColumnName("WFRS");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("IX_Category");

                    b.HasIndex("ValidTill")
                        .HasName("IX_Category_1");

                    b.HasIndex("Code", "Name")
                        .HasName("IX_Category_2");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BA.Core.Entity.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountType");

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<int?>("ApprovalDays");

                    b.Property<string>("ArabicCode");

                    b.Property<bool?>("ArabicInvoice");

                    b.Property<string>("ArabicName");

                    b.Property<bool?>("Aramco");

                    b.Property<string>("Attribute4");

                    b.Property<int?>("BillingCollectorId");

                    b.Property<int?>("BillingOfficerId");

                    b.Property<string>("BlockReason");

                    b.Property<int?>("BlockReasonId");

                    b.Property<bool?>("ByPassExclusionsStatus");

                    b.Property<int>("CategoryId");

                    b.Property<bool?>("CheckMedId");

                    b.Property<string>("City");

                    b.Property<string>("Code");

                    b.Property<bool>("Consultationlimit");

                    b.Property<string>("Contactpersondesig");

                    b.Property<string>("Contactpersonname");

                    b.Property<short>("Coverage");

                    b.Property<DateTime?>("DateTime");

                    b.Property<short?>("DeductableStatus");

                    b.Property<bool>("Deleted");

                    b.Property<decimal?>("DisForAdvancePay");

                    b.Property<byte?>("DiscountToPrint");

                    b.Property<string>("EmailId");

                    b.Property<short?>("EmpInfo");

                    b.Property<DateTime?>("EndDateTime");

                    b.Property<string>("FaxNo");

                    b.Property<string>("FaxNo2");

                    b.Property<decimal>("FixedConCharges");

                    b.Property<byte>("FollowRules");

                    b.Property<string>("HostName");

                    b.Property<string>("InsertUpdate");

                    b.Property<decimal>("InvoiceConFee");

                    b.Property<int>("Ippd");

                    b.Property<bool?>("Loaconsultation");

                    b.Property<DateTime?>("ModifiedDateTime");

                    b.Property<string>("Name");

                    b.Property<int?>("NoofVisits");

                    b.Property<int?>("Opconsultations");

                    b.Property<int>("OperatorId");

                    b.Property<int>("Oppd");

                    b.Property<decimal?>("PerAdvancetoPay");

                    b.Property<bool>("PharmacyCstheader");

                    b.Property<string>("PoBox");

                    b.Property<string>("PolicyNo");

                    b.Property<string>("PolicyRules");

                    b.Property<int?>("PrintAddress");

                    b.Property<string>("ProviderCode");

                    b.Property<int?>("ReferralBasis");

                    b.Property<decimal>("RegCharges");

                    b.Property<short?>("RegFeePaidBy");

                    b.Property<bool?>("RelationDetails");

                    b.Property<string>("Remarks");

                    b.Property<byte?>("RevisitDays");

                    b.Property<int?>("Speccons");

                    b.Property<string>("StaffAttribute4");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int?>("SubCategoryId");

                    b.Property<int?>("TariffId");

                    b.Property<int?>("TariffLevel");

                    b.Property<string>("TelNo2");

                    b.Property<string>("TelephoneNo");

                    b.Property<int?>("Tpaid");

                    b.Property<bool?>("Ucf");

                    b.Property<bool?>("Uploaded");

                    b.Property<DateTime?>("ValidFrom");

                    b.Property<DateTime?>("ValidTill");

                    b.Property<int?>("Wfcls");

                    b.Property<int?>("Wfrc");

                    b.Property<int?>("Wfrs");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("BA.Core.Entity.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ArabicCode")
                        .HasMaxLength(100);

                    b.Property<string>("ArabicName")
                        .HasMaxLength(100);

                    b.Property<string>("Bscname")
                        .HasColumnName("BSCName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DdbarabicName")
                        .HasColumnName("DDBArabicName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Deleted");

                    b.Property<string>("DeptClassId")
                        .HasColumnName("DeptClassID")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("DeptCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("DivisionId");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte?>("NonSghdept")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NonSGHDept")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("Oldid")
                        .HasColumnName("OLDID");

                    b.Property<int?>("OperatorId")
                        .HasColumnName("OperatorID");

                    b.Property<string>("OraCode")
                        .HasColumnName("Ora_Code")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("RecordId")
                        .HasColumnName("RecordID")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Udatetime")
                        .HasColumnName("UDATETIME")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Uploaded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UPLOADED")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("IDX_DEPTID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("BA.Core.Entity.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AduserName")
                        .HasColumnName("ADUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short?>("Age");

                    b.Property<string>("ArabicName")
                        .HasMaxLength(100);

                    b.Property<string>("Arabiccode")
                        .HasMaxLength(50);

                    b.Property<string>("BranchCode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('110')")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CellNo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ContactTime")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Deleted");

                    b.Property<int?>("DepartmentId")
                        .HasColumnName("DepartmentID");

                    b.Property<int?>("DesignationId")
                        .HasColumnName("DesignationID");

                    b.Property<int?>("DivisionId")
                        .HasColumnName("DivisionID");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Eadd1")
                        .HasColumnName("EAdd1")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Ecity")
                        .HasColumnName("ECity")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EcontactPerson")
                        .HasColumnName("EContactPerson")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Ecountry")
                        .HasColumnName("ECountry")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnName("EMail")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmpCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeId")
                        .HasColumnName("EmployeeID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte?>("EmployeeType");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("EphoneNo")
                        .HasColumnName("EPhoneNo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Epincode")
                        .HasColumnName("EPINcode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Estate")
                        .HasColumnName("EState")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FaxNo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Glcode")
                        .HasColumnName("GLCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Hadd1")
                        .HasColumnName("HAdd1")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Hcity")
                        .HasColumnName("HCity")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Hcountry")
                        .HasColumnName("HCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HphoneNo")
                        .HasColumnName("HPhoneNo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Hpincode")
                        .HasColumnName("HPINCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Hstate")
                        .HasColumnName("HState")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Iacode")
                        .HasColumnName("IACode")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<bool?>("Indent");

                    b.Property<string>("InsertUpdate")
                        .HasColumnName("Insert_Update")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("InsuranceNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("IsExpat");

                    b.Property<int?>("IsHalfDayDuty");

                    b.Property<byte?>("IsPractisingDoctor")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("IsUploaded");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("LockedYn")
                        .HasColumnName("Locked_YN")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("LoggedIpaddress")
                        .HasColumnName("LoggedIPAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("LoggedYn")
                        .HasColumnName("LoggedYN");

                    b.Property<int?>("Medical");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(122)
                        .IsUnicode(false);

                    b.Property<int?>("NationId")
                        .HasColumnName("NationID");

                    b.Property<string>("OldEmpCode")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("OperatorId")
                        .HasColumnName("OperatorID");

                    b.Property<int?>("OpmarkUpPercent")
                        .HasColumnName("OPMarkUpPercent");

                    b.Property<string>("PagerNo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PlaceOfContact")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PwSetDate")
                        .HasColumnName("PW_SET_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("PwdExpiredYn")
                        .HasColumnName("PWD_EXPIRED_YN")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PwdSetDate")
                        .HasColumnName("PWD_SET_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("Qualification")
                        .HasMaxLength(75)
                        .IsUnicode(false);

                    b.Property<int?>("RegNo");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("SectionId")
                        .HasColumnName("Section_ID");

                    b.Property<int?>("Sex");

                    b.Property<int?>("SocialId");

                    b.Property<int?>("SocialNumber");

                    b.Property<int?>("SocialRegisterId")
                        .HasColumnName("SocialRegisterID");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnName("SubCategoryID");

                    b.Property<byte?>("Supervisor");

                    b.Property<string>("SystemName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("TaxId");

                    b.Property<string>("TempRegNo")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Timings")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Title");

                    b.Property<DateTime?>("UserEndTime")
                        .HasColumnName("USER_END_TIME")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UserStartTime")
                        .HasColumnName("USER_START_TIME")
                        .HasColumnType("datetime");

                    b.Property<byte?>("VisitingProf")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("Wadd1")
                        .HasColumnName("WAdd1")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Wcity")
                        .HasColumnName("WCity")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Wcountry")
                        .HasColumnName("WCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("WorkHours")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((8))");

                    b.Property<int?>("WorkHoursScs")
                        .HasColumnName("WorkHours_SCS");

                    b.Property<string>("WphoneNo")
                        .HasColumnName("WPhoneNo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Wpincode")
                        .HasColumnName("WPINCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Wstate")
                        .HasColumnName("WState")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DesignationId")
                        .HasName("IX_Employee_3");

                    b.HasIndex("EmpCode")
                        .HasName("Idx_Employee_EmpCode");

                    b.HasIndex("RegNo")
                        .HasName("IX_Employee_2");

                    b.HasIndex("CategoryId", "EmpCode")
                        .HasName("Idx_CatId_EmpCode");

                    b.HasIndex("EmployeeId", "Deleted")
                        .HasName("Idx_Employee_EmpID_Del");

                    b.HasIndex("Iacode", "RegNo")
                        .HasName("IX_Employee_Regno");

                    b.HasIndex("Id", "EmployeeId", "DesignationId", "Name", "Deleted")
                        .HasName("ExcludeAlpaEmployeeID, sysname,>");

                    b.HasIndex("Id", "EmployeeId", "DepartmentId", "Name", "DivisionId", "Deleted")
                        .HasName("ix_Employee_ID2");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("BA.Core.Entity.Grade", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("ArabicName")
                        .HasMaxLength(100);

                    b.Property<int?>("BedTypeId")
                        .HasColumnName("BedTypeID");

                    b.Property<bool?>("Blocked");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<int>("CompanyId")
                        .HasColumnName("CompanyID");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("FixedConCharges")
                        .HasColumnType("numeric(9, 2)");

                    b.Property<string>("GradeName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("InvoiceConFee")
                        .HasColumnType("numeric(9, 2)");

                    b.Property<decimal?>("IpcreditLimit")
                        .HasColumnName("IPCreditLimit")
                        .HasColumnType("numeric(14, 2)");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("Opconsultations")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OPConsultations")
                        .HasDefaultValueSql("(0)");

                    b.Property<int>("OperatorId")
                        .HasColumnName("OperatorID");

                    b.Property<string>("PolicyNo")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal?>("RoomCharges")
                        .HasColumnType("decimal(9, 4)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TariffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TariffID")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId", "CompanyId")
                        .HasName("IX_Grade");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("BA.Core.Entity.IPBService", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("ArabicServiceCode")
                        .HasMaxLength(100);

                    b.Property<string>("ArabicServiceName")
                        .HasMaxLength(100);

                    b.Property<short?>("CalType");

                    b.Property<bool?>("Category")
                        .HasColumnName("category");

                    b.Property<bool?>("Deleted");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("DetailTable")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<short?>("DisplayServiceId")
                        .HasColumnName("DisplayServiceID");

                    b.Property<string>("GroupTable")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("Itemlevel")
                        .HasColumnName("itemlevel");

                    b.Property<int?>("MarkUp");

                    b.Property<string>("MasterTable")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<short?>("NextDisplay");

                    b.Property<short?>("NoofPrices");

                    b.Property<string>("OraCode")
                        .HasColumnName("Ora_Code")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<short?>("OrderNo");

                    b.Property<string>("OrderTable")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<short?>("OrderType");

                    b.Property<string>("PriceTable")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<short?>("PriceType");

                    b.Property<bool?>("Procedure");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SupportTable")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Udatetime")
                        .HasColumnName("udatetime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Uploaded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uploaded")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("DisplayServiceId")
                        .HasName("Ind_NonClus_IpBServie_DiscplayServiceID");

                    b.HasIndex("Id")
                        .HasName("Ind_Clus_IpBService_ID")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("IPBService");
                });

            modelBuilder.Entity("BA.Core.Entity.MenuAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Bar");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FeatureId")
                        .HasColumnName("FeatureID");

                    b.Property<int?>("MenuType");

                    b.Property<string>("MenuUrl")
                        .IsRequired()
                        .HasColumnName("MenuURL")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("NewWindow");

                    b.Property<int?>("OperatorId")
                        .HasColumnName("OperatorID");

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentID");

                    b.Property<int?>("SequenceNo");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("MENU_ACCESS","HISGLOBAL");
                });

            modelBuilder.Entity("BA.Core.Entity.MenuParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MenuId")
                        .HasColumnName("MenuID");

                    b.Property<int?>("MenuLevel");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("SequenceNo");

                    b.HasKey("Id");

                    b.ToTable("MENU_PARENT","HISGLOBAL");
                });

            modelBuilder.Entity("BA.Core.Entity.OPBService", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Deleted");

                    b.Property<string>("DetaiTtable")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<int?>("DisplayServiceId");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("MarkUp");

                    b.Property<string>("MasterTable")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("OraCode")
                        .HasColumnName("Ora_Code")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("OrderTable")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("PriceTable")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("SupportTable")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("OPBService");
                });

            modelBuilder.Entity("BA.Core.Entity.OrganisationDetail", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("AddInformation")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Address3")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Cashdefaultmarkup")
                        .HasColumnName("CASHDEFAULTMARKUP");

                    b.Property<string>("CellPhoneNo")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CurrencyId");

                    b.Property<byte?>("DelayPerPage");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnName("EMail")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("FaxNo")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<byte?>("IsSmsenable")
                        .HasColumnName("IsSMSEnable");

                    b.Property<string>("IssueAuthorityCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<byte?>("MovEnable")
                        .HasColumnName("movEnable");

                    b.Property<DateTime?>("MovEndTime")
                        .HasColumnName("movEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MovStartTime")
                        .HasColumnName("movStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("NewRuleForLeave")
                        .HasColumnName("new_rule_for_leave");

                    b.Property<string>("OraBranchid")
                        .HasColumnName("ORA_BRANCHID")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("OraCompanycode")
                        .HasColumnName("ORA_COMPANYCODE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("OraCountrycode")
                        .HasColumnName("ORA_COUNTRYCODE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("OraCurrencycode")
                        .HasColumnName("ORA_CURRENCYCODE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("PagerNo")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<byte?>("PicPerPage");

                    b.Property<string>("PinCode")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("TaxEnabled")
                        .HasColumnName("Tax_Enabled");

                    b.Property<string>("VatregNo")
                        .HasColumnName("VATRegNo")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CompanyId")
                        .HasName("Ind_NonClus_OrganisationDetails_CompanyID");

                    b.HasIndex("Id")
                        .HasName("Ind_Clus_OrganisationDetails_ID")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("OrganisationDetails");
                });

            modelBuilder.Entity("BA.Core.Entity.Patient", b =>
                {
                    b.Property<string>("IssueAuthorityCode")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<int>("Registrationno");

                    b.Property<string>("Aaddress1")
                        .HasColumnName("AAddress1")
                        .HasMaxLength(50);

                    b.Property<string>("Aaddress2")
                        .HasColumnName("AAddress2")
                        .HasMaxLength(50);

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Address3")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AfamilyName")
                        .HasColumnName("AFamilyName")
                        .HasMaxLength(50);

                    b.Property<string>("AfirstName")
                        .HasColumnName("AFirstName")
                        .HasMaxLength(50);

                    b.Property<short>("Age");

                    b.Property<short>("Agetype");

                    b.Property<string>("AlastName")
                        .HasColumnName("ALastName")
                        .HasMaxLength(50);

                    b.Property<string>("AmiddleName")
                        .HasColumnName("AMiddleName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("AramcoRegDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Billed");

                    b.Property<bool?>("BilledBy");

                    b.Property<byte?>("Billtype");

                    b.Property<DateTime?>("BirthTime")
                        .HasColumnType("datetime");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("CategoryId");

                    b.Property<bool>("Caution");

                    b.Property<string>("Ccurrency")
                        .HasColumnName("CCurrency")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<bool?>("ChequeBounce");

                    b.Property<string>("CityName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CompanyLetterId");

                    b.Property<int?>("Country");

                    b.Property<string>("CountryName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Cpagerno")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted");

                    b.Property<int?>("DoctorId");

                    b.Property<byte?>("Embose")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("EmboseCharged")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FathersName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Gaddress")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Gcellno")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Gemail")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Gphone")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int?>("GradeId");

                    b.Property<string>("Grelationship")
                        .HasColumnName("GRelationship")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Guardian")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("IdexpiryDate")
                        .HasColumnName("IDExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsertUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Insert_Update")
                        .HasDefaultValueSql("('I')")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("InvoiceDateTime")
                        .HasColumnType("datetime");

                    b.Property<byte?>("IsInvoiced");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastModifiedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short>("MaritalStatus");

                    b.Property<string>("MedIdnumber")
                        .HasColumnName("MedIDNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool?>("Messages");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ModifiedOperator");

                    b.Property<string>("MothersMaidenName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<short?>("Mrblocked")
                        .HasColumnName("MRBlocked");

                    b.Property<int?>("Nationality");

                    b.Property<bool>("NonSaudi");

                    b.Property<string>("Occupation")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("OperatorId")
                        .HasColumnName("OperatorID");

                    b.Property<string>("OtherAllergies")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PZipCode")
                        .HasColumnName("pZipCode")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("PassportIssuedAt")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("PassportNo")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasMaxLength(14)
                        .IsUnicode(false);

                    b.Property<string>("Pcellno")
                        .HasColumnName("PCellno")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int>("Pcity")
                        .HasColumnName("PCity");

                    b.Property<string>("Pemail")
                        .HasColumnName("PEMail")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PolicyNo")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Ppagerno")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Pphone")
                        .HasColumnName("PPhone")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("ReferredDocAddress")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("ReferredDocCellNo")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("ReferredDocEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ReferredDocName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ReferredDocPhone")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("ReferredDocSpecialisation")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<short?>("Religion");

                    b.Property<string>("Rpagerno")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("SaudiIqamaId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<short>("Sex");

                    b.Property<string>("Sexothers")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SghdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SGHDateTime")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Sghname")
                        .HasColumnName("SGHName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SghregNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SGHRegNO")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SidExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SidIssueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SidIssuedAt")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool?>("Uploadtag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UPLOADTAG")
                        .HasDefaultValueSql("(0)");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Vip");

                    b.Property<string>("WrkAddress")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("WrkCompanyName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("WrkEmail")
                        .HasColumnName("WrkEMail")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("WrkFax")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("WrkPhone")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("IssueAuthorityCode", "Registrationno");

                    b.HasIndex("MedIdnumber")
                        .HasName("IDX_MEDIDNUMBER");

                    b.HasIndex("RegDateTime")
                        .HasName("IX_Patient");

                    b.HasIndex("Registrationno")
                        .HasName("IDX_REGNO");

                    b.HasIndex("Registrationno", "IssueAuthorityCode")
                        .HasName("IDX_REGNO_ISSUE");

                    b.HasIndex("CategoryId", "CompanyId", "GradeId")
                        .HasName("IDX_CAT_COM_GR");

                    b.HasIndex("Firstname", "MiddleName", "LastName")
                        .HasName("IDX_Patient_Firstname");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("BA.Core.Entity.PatientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PatientType","MASTER");
                });

            modelBuilder.Entity("BA.Core.Entity.Station", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<int?>("Appid")
                        .HasColumnName("appid");

                    b.Property<string>("Arabicname")
                        .HasColumnName("ARABICNAME")
                        .HasMaxLength(100);

                    b.Property<string>("Code")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<bool>("Deleted");

                    b.Property<int?>("DepartmentId");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<short?>("IndentLevel");

                    b.Property<int?>("IpMaxNo");

                    b.Property<string>("Location")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("LocationId");

                    b.Property<int?>("Modifiedby")
                        .HasColumnName("modifiedby");

                    b.Property<DateTime?>("Modifieddatetime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("Operatorid")
                        .HasColumnName("operatorid");

                    b.Property<string>("OraCode")
                        .HasColumnName("ORA_CODE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StationTypeId")
                        .HasColumnName("StationTypeID");

                    b.Property<byte?>("Stores");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("IX_Station");

                    b.HasIndex("Id", "DepartmentId")
                        .HasName("IX_Station_1");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("BA.Core.Entity.Tariff", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("OperatorId")
                        .HasColumnName("OperatorID");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Tariff");
                });

            modelBuilder.Entity("BA.Core.Entity.ApprovalRequest", b =>
                {
                    b.HasOne("BA.Core.Entity.ApprovalRequestStatus", "ApprovalRequestStatus")
                        .WithMany()
                        .HasForeignKey("ApprovalRequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BA.Core.Entity.ApprovalRequestType", "ApprovalRequestType")
                        .WithMany()
                        .HasForeignKey("ApprovalRequestTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BA.Core.Entity.OrganisationDetail", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BA.Core.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BA.Core.Entity.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BA.Core.Entity.Employee", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BA.Core.Entity.Employee", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BA.Core.Entity.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BA.Core.Entity.Employee", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("BA.Core.Entity.PatientType", "PatientType")
                        .WithMany()
                        .HasForeignKey("PatientTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BA.Core.Entity.Employee", "ProcessBy")
                        .WithMany()
                        .HasForeignKey("ProcessById");

                    b.HasOne("BA.Core.Entity.Station", "RequestCreationStation")
                        .WithMany()
                        .HasForeignKey("RequestCreationStationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BA.Core.Entity.Station", "RequestModificationStation")
                        .WithMany()
                        .HasForeignKey("RequestModificationStationId");

                    b.HasOne("BA.Core.Entity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("IssueAuthorityCode", "Registrationno");
                });

            modelBuilder.Entity("BA.Core.Entity.ApprovalRequestItem", b =>
                {
                    b.HasOne("BA.Core.Entity.ApprovalRequest", "ApprovalRequest")
                        .WithMany("ApprovalItems")
                        .HasForeignKey("ApprovalRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BA.Core.Entity.ApprovalRequestItemStatus", "ApprovalRequestItemStatus")
                        .WithMany()
                        .HasForeignKey("ApprovalRequestItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BA.Core.Entity.Employee", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BA.Core.Entity.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BA.Core.Entity.IPBService", "IPBService")
                        .WithMany()
                        .HasForeignKey("IPBServiceId");

                    b.HasOne("BA.Core.Entity.Employee", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("BA.Core.Entity.OPBService", "OPBService")
                        .WithMany()
                        .HasForeignKey("OPBServiceId");

                    b.HasOne("BA.Core.Entity.Tariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BA.Core.Entity.ApprovalRequestItemStatus", b =>
                {
                    b.HasOne("BA.Core.Entity.Employee", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BA.Core.Entity.Employee", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("BA.Core.Entity.ApprovalRequestStatus", b =>
                {
                    b.HasOne("BA.Core.Entity.Employee", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BA.Core.Entity.Employee", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("BA.Core.Entity.ApprovalRequestType", b =>
                {
                    b.HasOne("BA.Core.Entity.Employee", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BA.Core.Entity.Employee", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("BA.Core.Entity.PatientType", b =>
                {
                    b.HasOne("BA.Core.Entity.Employee", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BA.Core.Entity.Employee", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });
#pragma warning restore 612, 618
        }
    }
}
